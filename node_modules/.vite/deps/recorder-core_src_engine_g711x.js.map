{
  "version": 3,
  "sources": ["../../recorder-core/src/engine/g711x.js"],
  "sourcesContent": ["/*\r\ng711x编码器+解码器\r\nhttps://github.com/xiangyuecn/Recorder\r\n\r\n可用type：\r\n\tg711a: G.711 A-law (pcma)\r\n\tg711u: G.711 μ-law (pcmu、mu-law)\r\n\r\n编解码源码移植自：https://github.com/twstx1/codec-for-audio-in-G72X-G711-G723-G726-G729/blob/master/G711_G721_G723/g711.c\r\n移植相关测试代码（FFmpeg转码、播放命令）：assets/runtime-codes/test.g7xx.engine.js\r\n*/\r\n(function(factory){\r\n\tvar browser=typeof window==\"object\" && !!window.document;\r\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\r\n\tvar rec=win.Recorder,ni=rec.i18n;\r\n\tfactory(rec,ni,ni.$T,browser);\r\n}(function(Recorder,i18n,$T,isBrowser){\r\n\"use strict\";\r\n\r\nvar regEngine=function(key,desc,enc,dec){\r\n\r\nRecorder.prototype[\"enc_\"+key]={\r\n\tstable:true,fast:true\r\n\t,getTestMsg:function(){\r\n\t\treturn $T(\"d8YX::{1}；{2}音频文件无法直接播放，可用Recorder.{2}2wav()转码成wav播放；采样率比特率设置无效，固定为8000hz采样率、16位，每个采样压缩成8位存储，音频文件大小为8000字节/秒；如需任意采样率支持，请使用Recorder.{2}_encode()方法\",0,desc,key);\r\n\t}\r\n};\r\n\r\n//*******标准UI线程转码支持函数************\r\nRecorder.prototype[key]=function(res,True,False){\r\n\tvar This=this,set=This.set,srcSampleRate=set.sampleRate,sampleRate=8000;\r\n\tset.bitRate=16;\r\n\tset.sampleRate=sampleRate;\r\n\tif(srcSampleRate>sampleRate){\r\n\t\tres=Recorder.SampleData([res],srcSampleRate,sampleRate).data;\r\n\t}else if(srcSampleRate<sampleRate){\r\n\t\tFalse($T(\"29UK::数据采样率低于{1}\",0,sampleRate)); return;\r\n\t};\r\n\tvar bytes=enc(res);\r\n\tTrue(bytes.buffer,\"audio/\"+key);\r\n};\r\n\r\n/**编码任意采样率的pcm得到g711x数据\r\npcm: Int16Array，任意采样率pcm数据（标准采样率为8000）\r\n返回Uint8Array，g711x二进制数据（采样率为pcm的采样率）\r\n**/\r\nRecorder[key+\"_encode\"]=function(pcm){\r\n\treturn enc(pcm);\r\n};\r\n/**解码g711x得到pcm\r\nbytes: Uint8Array，g711x二进制数据，采样率一般是8000\r\n返回Int16Array，为g711x的采样率、16位的pcm数据\r\n**/\r\nRecorder[key+\"_decode\"]=function(bytes){\r\n\treturn dec(bytes);\r\n};\r\n\r\n/**g711x直接转码成wav，可以直接用来播放；需同时引入src/engine/wav.js\r\ng711xBlob: g711x音频文件blob对象 或 ArrayBuffer（回调也将返回ArrayBuffer），采样率只支持8000\r\nTrue(wavBlob,duration,mime)\r\nFalse(msg)\r\n**/\r\nRecorder[key+\"2wav\"]=function(g711xBlob,True,False){\r\n\tif(!Recorder.prototype.wav){\r\n\t\tFalse($T.G(\"NeedImport-2\",[key+\"2wav\",\"src/engine/wav.js\"]));\r\n\t\treturn;\r\n\t};\r\n\t\r\n\tvar loadOk=function(arrB,dArrB){\r\n\t\tvar bytes=new Uint8Array(arrB);\r\n\t\tvar pcm=dec(bytes);\r\n\t\t\r\n\t\tvar rec=Recorder({\r\n\t\t\ttype:\"wav\",sampleRate:8000,bitRate:16\r\n\t\t});\r\n\t\tif(dArrB)rec.dataType=\"arraybuffer\";\r\n\t\trec.mock(pcm,8000).stop(function(wavBlob,duration,mime){\r\n\t\t\tTrue(wavBlob,duration,mime);\r\n\t\t},False);\r\n\t};\r\n\t\r\n\tif(g711xBlob instanceof ArrayBuffer){\r\n\t\tloadOk(g711xBlob,1);\r\n\t}else{\r\n\t\tvar reader=new FileReader();\r\n\t\treader.onloadend=function(){\r\n\t\t\tloadOk(reader.result);\r\n\t\t};\r\n\t\treader.readAsArrayBuffer(g711xBlob);\r\n\t};\r\n};\r\n\r\n\r\n\r\n\r\n//********边录边转码支持函数，g711转码超快，因此也是工作在UI线程（非Worker）*********\r\nRecorder.prototype[key+\"_envCheck\"]=function(envInfo,set){//检查环境下配置是否可用\r\n\treturn \"\"; //没有需要检查的内容\r\n};\r\n\r\nRecorder.prototype[key+\"_start\"]=function(set){//如果返回null代表不支持\r\n\tset.bitRate=16;\r\n\tset.sampleRate=8000;\r\n\treturn {set:set, memory:new Uint8Array(500000), mOffset:0};\r\n};\r\nvar addBytes=function(cur,buf){\r\n\tvar bufLen=buf.length;\r\n\tif(cur.mOffset+bufLen>cur.memory.length){\r\n\t\tvar tmp=new Uint8Array(cur.memory.length+Math.max(500000,bufLen));\r\n\t\ttmp.set(cur.memory.subarray(0, cur.mOffset));\r\n\t\tcur.memory=tmp;\r\n\t}\r\n\tcur.memory.set(buf,cur.mOffset);\r\n\tcur.mOffset+=bufLen;\r\n};\r\n\r\nRecorder.prototype[key+\"_stop\"]=function(startCtx){\r\n\tif(startCtx&&startCtx.memory){\r\n\t\tstartCtx.memory=null;\r\n\t}\r\n};\r\nRecorder.prototype[key+\"_encode\"]=function(startCtx,pcm){\r\n\tif(startCtx&&startCtx.memory){\r\n\t\tvar set=startCtx.set;\r\n\t\tvar bytes=enc(pcm);\r\n\t\t\r\n\t\tif(set.takeoffEncodeChunk){\r\n\t\t\tset.takeoffEncodeChunk(bytes);\r\n\t\t}else{\r\n\t\t\taddBytes(startCtx, bytes);\r\n\t\t};\r\n\t};\r\n};\r\nRecorder.prototype[key+\"_complete\"]=function(startCtx,True,False,autoStop){\r\n\tif(startCtx&&startCtx.memory){\r\n\t\tif(autoStop){\r\n\t\t\tthis[key+\"_stop\"](startCtx);\r\n\t\t};\r\n\t\tvar buffer=startCtx.memory.buffer.slice(0,startCtx.mOffset);\r\n\t\tTrue(buffer,\"audio/\"+key);\r\n\t}else{\r\n\t\tFalse($T(\"quVJ::{1}编码器未start\",0,key));\r\n\t};\r\n};\r\n\r\n};\r\n\r\n\r\n\r\nvar Tab=[1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];\r\n\r\nregEngine(\"g711a\",\"G.711 A-law (pcma)\"\r\n,function(pcm){//编码\r\n\tvar buffer=new Uint8Array(pcm.length);\r\n\tfor(var i=0;i<pcm.length;i++){\r\n\t\tvar pcm_val=pcm[i],mask;\r\n\r\n\t\tif (pcm_val >= 0) {\r\n\t\t\tmask = 0xD5;\t\t/* sign (7th) bit = 1 */\r\n\t\t} else {\r\n\t\t\tmask = 0x55;\t\t/* sign bit = 0 */\r\n\t\t\tpcm_val = -pcm_val - 1;\r\n\t\t}\r\n\r\n\t\t/* Convert the scaled magnitude to segment number. */\r\n\t\tvar seg = (Tab[pcm_val>>8&0x7F]||8)-1;\r\n\t\t\r\n\t\t/* Combine the sign, segment, and quantization bits. */\r\n\t\tvar aval = seg << 4;\r\n\t\tif (seg < 2)\r\n\t\t\taval |= (pcm_val >> 4) & 15;\r\n\t\telse\r\n\t\t\taval |= (pcm_val >> (seg + 3)) & 15;\r\n\t\tbuffer[i] = (aval ^ mask);\r\n\t}\r\n\treturn buffer;\r\n}\r\n,function(bytes){//解码\r\n\tvar buffer=new Int16Array(bytes.length);\r\n\tfor(var i=0;i<bytes.length;i++){\r\n\t\tvar a_val=bytes[i]^0x55;\r\n\t\tvar t = (a_val & 15) << 4;\r\n\t\tvar seg = (a_val & 0x70) >> 4;\r\n\t\tswitch (seg) {\r\n\t\tcase 0:\r\n\t\t\tt += 8; break;\r\n\t\tcase 1:\r\n\t\t\tt += 0x108; break;\r\n\t\tdefault:\r\n\t\t\tt += 0x108;\r\n\t\t\tt <<= seg - 1;\r\n\t\t}\r\n\t\tbuffer[i] = ((a_val & 0x80) ? t : -t);\r\n\t}\r\n\treturn buffer;\r\n});\r\n\r\n\r\nregEngine(\"g711u\",\"G.711 μ-law (pcmu、mu-law)\"\r\n,function(pcm){//编码\r\n\tvar buffer=new Uint8Array(pcm.length);\r\n\tfor(var i=0;i<pcm.length;i++){\r\n\t\tvar pcm_val=pcm[i],mask;\r\n\t\t\r\n\t\t/* Get the sign and the magnitude of the value. */\r\n\t\tif (pcm_val < 0) {\r\n\t\t\tpcm_val = 0x84 - pcm_val;\r\n\t\t\tmask = 0x7F;\r\n\t\t} else {\r\n\t\t\tpcm_val += 0x84;\r\n\t\t\tmask = 0xFF;\r\n\t\t}\r\n\t\t\r\n\t\t/* Convert the scaled magnitude to segment number. */\r\n\t\tvar seg = (Tab[pcm_val>>8&0x7F]||8)-1;\r\n\t\t\r\n\t\tvar uval = (seg << 4) | ((pcm_val >> (seg + 3)) & 0xF);\r\n\t\tbuffer[i] = (uval ^ mask);\r\n\t}\r\n\treturn buffer;\r\n}\r\n,function(bytes){//解码\r\n\tvar buffer=new Int16Array(bytes.length);\r\n\tfor(var i=0;i<bytes.length;i++){\r\n\t\tvar u_val= ~bytes[i];\r\n\t\t\r\n\t\tvar t = ((u_val & 15) << 3) + 0x84;\r\n\t\tt <<= (u_val & 0x70) >> 4;\r\n\r\n\t\tbuffer[i] = ((u_val & 0x80) ? (0x84 - t) : (t - 0x84));\r\n\t}\r\n\treturn buffer;\r\n});\r\n\r\n\r\n}));"],
  "mappings": "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",
  "names": []
}
