{
  "version": 3,
  "sources": ["../../recorder-core/src/engine/pcm.js"],
  "sourcesContent": ["/*\npcm编码器+编码引擎\nhttps://github.com/xiangyuecn/Recorder\n\n编码原理：本编码器输出的pcm格式数据其实就是Recorder中的buffers原始数据（经过了重新采样），16位时为LE小端模式（Little Endian），并未经过任何编码处理\n\n编码的代码和wav.js区别不大，pcm加上一个44字节wav头即成wav文件；所以要播放pcm就很简单了，直接转成wav文件来播放，已提供转换函数 Recorder.pcm2wav\n*/\n(function(factory){\n\tvar browser=typeof window==\"object\" && !!window.document;\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\n\tvar rec=win.Recorder,ni=rec.i18n;\n\tfactory(rec,ni,ni.$T,browser);\n}(function(Recorder,i18n,$T,isBrowser){\n\"use strict\";\n\nRecorder.prototype.enc_pcm={\n\tstable:true,fast:true\n\t,getTestMsg:function(){\n\t\treturn $T(\"fWsN::pcm为未封装的原始音频数据，pcm音频文件无法直接播放，可用Recorder.pcm2wav()转码成wav播放；支持位数8位、16位（填在比特率里面），采样率取值无限制\");\n\t}\n};\n\nvar NormalizeSet=function(set){\n\tvar bS=set.bitRate,b=bS==8?8:16;\n\tif(bS!=b) Recorder.CLog($T(\"uMUJ::PCM Info: 不支持{1}位，已更新成{2}位\",0,bS,b),3);\n\tset.bitRate=b;\n};\n\n\n\n//*******标准UI线程转码支持函数************\n\nRecorder.prototype.pcm=function(res,True,False){\n\tvar set=this.set;\n\tNormalizeSet(set);\n\tvar bytes=PcmEncode(res,set.bitRate);\n\tTrue(bytes.buffer,\"audio/pcm\");\n};\n\nvar PcmEncode=function(pcm,bitRate){\n\tif(bitRate==8) {\n\t\tvar size=pcm.length;\n\t\tvar bytes=new Uint8Array(size);\n\t\tfor(var i=0;i<size;i++){\n\t\t\t//16转8据说是雷霄骅的 https://blog.csdn.net/sevennight1989/article/details/85376149 细节比blqw的按比例的算法清晰点\n\t\t\tvar val=(pcm[i]>>8)+128;\n\t\t\tbytes[i]=val;\n\t\t};\n\t}else{\n\t\tpcm=new Int16Array(pcm); //复制一份\n\t\tvar bytes=new Uint8Array(pcm.buffer);\n\t};\n\treturn bytes;\n};\n\n\n\n\n\n/**pcm直接转码成wav，可以直接用来播放；需同时引入src/engine/wav.js\ndata: {\n\t\tsampleRate:16000 pcm的采样率\n\t\tbitRate:16 pcm的位数 取值：8 或 16\n\t\tblob:blob对象 或 ArrayBuffer（回调也将返回ArrayBuffer）\n\t}\n\tdata如果直接提供的blob将默认使用16位16khz的配置，仅用于测试\nTrue(wavBlob,duration,mime)\nFalse(msg)\n**/\nRecorder.pcm2wav=function(data,True,False){\n\tif(!data.blob){//Blob 测试用\n\t\tdata={blob:data};\n\t};\n\tvar blob=data.blob;\n\tvar sampleRate=data.sampleRate||16000,bitRate=data.bitRate||16;\n\tif(!data.sampleRate || !data.bitRate){\n\t\tRecorder.CLog($T(\"KmRz::pcm2wav必须提供sampleRate和bitRate\"),3);\n\t};\n\tif(!Recorder.prototype.wav){\n\t\tFalse($T.G(\"NeedImport-2\",[\"pcm2wav\",\"src/engine/wav.js\"]));\n\t\treturn;\n\t};\n\t\n\tvar loadOk=function(arrB,dArrB){\n\t\tvar pcm;\n\t\tif(bitRate==8){\n\t\t\t//8位转成16位\n\t\t\tvar u8arr=new Uint8Array(arrB);\n\t\t\tpcm=new Int16Array(u8arr.length);\n\t\t\tfor(var j=0;j<u8arr.length;j++){\n\t\t\t\tpcm[j]=(u8arr[j]-128)<<8;\n\t\t\t};\n\t\t}else{\n\t\t\tpcm=new Int16Array(arrB);\n\t\t};\n\t\t\n\t\tvar rec=Recorder({\n\t\t\ttype:\"wav\"\n\t\t\t,sampleRate:sampleRate\n\t\t\t,bitRate:bitRate\n\t\t});\n\t\tif(dArrB)rec.dataType=\"arraybuffer\";\n\t\trec.mock(pcm,sampleRate).stop(function(wavBlob,duration,mime){\n\t\t\tTrue(wavBlob,duration,mime);\n\t\t},False);\n\t};\n\t\n\tif(blob instanceof ArrayBuffer){\n\t\tloadOk(blob,1);\n\t}else{\n\t\tvar reader=new FileReader();\n\t\treader.onloadend=function(){\n\t\t\tloadOk(reader.result);\n\t\t};\n\t\treader.readAsArrayBuffer(blob);\n\t};\n};\n\n\n\n//********边录边转码支持函数，pcm转码超快，因此也是工作在UI线程（非Worker）*********\nRecorder.prototype.pcm_envCheck=function(envInfo,set){//检查环境下配置是否可用\n\treturn \"\"; //没有需要检查的内容\n};\n\nRecorder.prototype.pcm_start=function(set){//如果返回null代表不支持\n\tNormalizeSet(set);\n\treturn {set:set, memory:new Uint8Array(500000), mOffset:0};\n};\nvar addBytes=function(cur,buf){\n\tvar bufLen=buf.length;\n\tif(cur.mOffset+bufLen>cur.memory.length){\n\t\tvar tmp=new Uint8Array(cur.memory.length+Math.max(500000,bufLen));\n\t\ttmp.set(cur.memory.subarray(0, cur.mOffset));\n\t\tcur.memory=tmp;\n\t}\n\tcur.memory.set(buf,cur.mOffset);\n\tcur.mOffset+=bufLen;\n};\n\nRecorder.prototype.pcm_stop=function(startCtx){\n\tif(startCtx&&startCtx.memory){\n\t\tstartCtx.memory=null;\n\t}\n};\nRecorder.prototype.pcm_encode=function(startCtx,pcm){\n\tif(startCtx&&startCtx.memory){\n\t\tvar set=startCtx.set;\n\t\tvar bytes=PcmEncode(pcm, set.bitRate);\n\t\t\n\t\tif(set.takeoffEncodeChunk){\n\t\t\tset.takeoffEncodeChunk(bytes);\n\t\t}else{\n\t\t\taddBytes(startCtx, bytes);\n\t\t};\n\t};\n};\nRecorder.prototype.pcm_complete=function(startCtx,True,False,autoStop){\n\tif(startCtx&&startCtx.memory){\n\t\tif(autoStop){\n\t\t\tthis.pcm_stop(startCtx);\n\t\t};\n\t\tvar buffer=startCtx.memory.buffer.slice(0,startCtx.mOffset);\n\t\tTrue(buffer,\"audio/pcm\");\n\t}else{\n\t\tFalse($T(\"sDkA::pcm编码器未start\"));\n\t};\n};\n\n\n\n\n}));"],
  "mappings": "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",
  "names": []
}
