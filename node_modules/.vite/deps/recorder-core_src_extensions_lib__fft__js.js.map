{
  "version": 3,
  "sources": ["../../recorder-core/src/extensions/lib.fft.js"],
  "sourcesContent": ["/*\r\n时域转频域，快速傅里叶变换(FFT)\r\nhttps://github.com/xiangyuecn/Recorder\r\n\r\nvar fft=Recorder.LibFFT(bufferSize)\r\n\tbufferSize取值2的n次方\r\n\r\nfft.bufferSize 实际采用的bufferSize\r\nfft.transform(inBuffer)\r\n\tinBuffer:[Int16,...] 数组长度必须是bufferSize\r\n\t返回[Float64(Long),...]，长度为bufferSize/2\r\n*/\r\n(function(factory){\r\n\tvar browser=typeof window==\"object\" && !!window.document;\r\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\r\n\tvar rec=win.Recorder,ni=rec.i18n;\r\n\tfactory(rec,ni,ni.$T,browser);\r\n}(function(Recorder,i18n,$T,isBrowser){\r\n\"use strict\";\r\n\r\n/*\r\n从FFT.java 移植，Java开源库：jmp123 版本0.3\r\nhttps://www.iteye.com/topic/851459\r\nhttps://sourceforge.net/projects/jmp123/files/\r\n*/\r\nRecorder.LibFFT=function(bufferSize){\r\n\tvar FFT_N_LOG,FFT_N,MINY;\r\n\tvar real, imag, sintable, costable;\r\n\tvar bitReverse;\r\n\r\n\tvar FFT_Fn=function(bufferSize) {//bufferSize只能取值2的n次方\r\n\t\tFFT_N_LOG=Math.round(Math.log(bufferSize)/Math.log(2));\r\n\t\tFFT_N = 1 << FFT_N_LOG;\r\n\t\tMINY = ((FFT_N << 2) * Math.sqrt(2));\r\n\t\t\r\n\t\treal = [];\r\n\t\timag = [];\r\n\t\tsintable = [0];\r\n\t\tcostable = [0];\r\n\t\tbitReverse = [];\r\n\r\n\t\tvar i, j, k, reve;\r\n\t\tfor (i = 0; i < FFT_N; i++) {\r\n\t\t\tk = i;\r\n\t\t\tfor (j = 0, reve = 0; j != FFT_N_LOG; j++) {\r\n\t\t\t\treve <<= 1;\r\n\t\t\t\treve |= (k & 1);\r\n\t\t\t\tk >>>= 1;\r\n\t\t\t}\r\n\t\t\tbitReverse[i] = reve;\r\n\t\t}\r\n\r\n\t\tvar theta, dt = 2 * Math.PI / FFT_N;\r\n\t\tfor (i = (FFT_N >> 1) - 1; i > 0; i--) {\r\n\t\t\ttheta = i * dt;\r\n\t\t\tcostable[i] = Math.cos(theta);\r\n\t\t\tsintable[i] = Math.sin(theta);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t用于频谱显示的快速傅里叶变换 \r\n    inBuffer 输入FFT_N个实数，返回 FFT_N/2个输出值(复数模的平方)。 \r\n\t*/\r\n\tvar getModulus=function(inBuffer) {\r\n\t\tvar i, j, k, ir, j0 = 1, idx = FFT_N_LOG - 1;\r\n\t\tvar cosv, sinv, tmpr, tmpi;\r\n\t\tfor (i = 0; i != FFT_N; i++) {\r\n\t\t\treal[i] = inBuffer[bitReverse[i]];\r\n\t\t\timag[i] = 0;\r\n\t\t}\r\n\r\n\t\tfor (i = FFT_N_LOG; i != 0; i--) {\r\n\t\t\tfor (j = 0; j != j0; j++) {\r\n\t\t\t\tcosv = costable[j << idx];\r\n\t\t\t\tsinv = sintable[j << idx];\r\n\t\t\t\tfor (k = j; k < FFT_N; k += j0 << 1) {\r\n\t\t\t\t\tir = k + j0;\r\n\t\t\t\t\ttmpr = cosv * real[ir] - sinv * imag[ir];\r\n\t\t\t\t\ttmpi = cosv * imag[ir] + sinv * real[ir];\r\n\t\t\t\t\treal[ir] = real[k] - tmpr;\r\n\t\t\t\t\timag[ir] = imag[k] - tmpi;\r\n\t\t\t\t\treal[k] += tmpr;\r\n\t\t\t\t\timag[k] += tmpi;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tj0 <<= 1;\r\n\t\t\tidx--;\r\n\t\t}\r\n\r\n\t\tj = FFT_N >> 1;\r\n\t\tvar outBuffer=new Float64Array(j);\r\n\t\t/*\r\n\t\t * 输出模的平方:\r\n\t\t * for(i = 1; i <= j; i++)\r\n\t\t * \tinBuffer[i-1] = real[i] * real[i] +  imag[i] * imag[i];\r\n\t\t * \r\n\t\t * 如果FFT只用于频谱显示,可以\"淘汰\"幅值较小的而减少浮点乘法运算. MINY的值\r\n\t\t * 和Spectrum.Y0,Spectrum.logY0对应.\r\n\t\t */\r\n\t\tsinv = MINY;\r\n\t\tcosv = -MINY;\r\n\t\tfor (i = j; i != 0; i--) {\r\n\t\t\ttmpr = real[i];\r\n\t\t\ttmpi = imag[i];\r\n\t\t\tif (tmpr > cosv && tmpr < sinv && tmpi > cosv && tmpi < sinv)\r\n\t\t\t\toutBuffer[i - 1] = 0;\r\n\t\t\telse\r\n\t\t\t\toutBuffer[i - 1] = Math.round(tmpr * tmpr + tmpi * tmpi);\r\n\t\t}\r\n\t\treturn outBuffer;\r\n\t}\r\n\t\r\n\tFFT_Fn(bufferSize);\r\n\treturn {transform:getModulus,bufferSize:FFT_N};\r\n};\r\n\r\n}));"],
  "mappings": ";CAYC,SAAS,SAAQ;AACjB,MAAI,UAAQ,OAAO,UAAQ,YAAY,CAAC,CAAC,OAAO;AAChD,MAAI,MAAI,UAAQ,SAAO;AACvB,MAAI,MAAI,IAAI,UAAS,KAAG,IAAI;AAC5B,UAAQ,KAAI,IAAG,GAAG,IAAG,OAAO;AAC7B,GAAE,SAAS,UAAS,MAAK,IAAG,WAAU;AACtC;AAOA,WAAS,SAAO,SAAS,YAAW;AACnC,QAAI,WAAU,OAAM;AACpB,QAAI,MAAM,MAAM,UAAU;AAC1B,QAAI;AAEJ,QAAI,SAAO,SAASA,aAAY;AAC/B,kBAAU,KAAK,MAAM,KAAK,IAAIA,WAAU,IAAE,KAAK,IAAI,CAAC,CAAC;AACrD,cAAQ,KAAK;AACb,cAAS,SAAS,KAAK,KAAK,KAAK,CAAC;AAElC,aAAO,CAAC;AACR,aAAO,CAAC;AACR,iBAAW,CAAC,CAAC;AACb,iBAAW,CAAC,CAAC;AACb,mBAAa,CAAC;AAEd,UAAI,GAAG,GAAG,GAAG;AACb,WAAK,IAAI,GAAG,IAAI,OAAO,KAAK;AAC3B,YAAI;AACJ,aAAK,IAAI,GAAG,OAAO,GAAG,KAAK,WAAW,KAAK;AAC1C,mBAAS;AACT,kBAAS,IAAI;AACb,iBAAO;AAAA,QACR;AACA,mBAAW,CAAC,IAAI;AAAA,MACjB;AAEA,UAAI,OAAO,KAAK,IAAI,KAAK,KAAK;AAC9B,WAAK,KAAK,SAAS,KAAK,GAAG,IAAI,GAAG,KAAK;AACtC,gBAAQ,IAAI;AACZ,iBAAS,CAAC,IAAI,KAAK,IAAI,KAAK;AAC5B,iBAAS,CAAC,IAAI,KAAK,IAAI,KAAK;AAAA,MAC7B;AAAA,IACD;AAMA,QAAI,aAAW,SAAS,UAAU;AACjC,UAAI,GAAG,GAAG,GAAG,IAAI,KAAK,GAAG,MAAM,YAAY;AAC3C,UAAI,MAAM,MAAM,MAAM;AACtB,WAAK,IAAI,GAAG,KAAK,OAAO,KAAK;AAC5B,aAAK,CAAC,IAAI,SAAS,WAAW,CAAC,CAAC;AAChC,aAAK,CAAC,IAAI;AAAA,MACX;AAEA,WAAK,IAAI,WAAW,KAAK,GAAG,KAAK;AAChC,aAAK,IAAI,GAAG,KAAK,IAAI,KAAK;AACzB,iBAAO,SAAS,KAAK,GAAG;AACxB,iBAAO,SAAS,KAAK,GAAG;AACxB,eAAK,IAAI,GAAG,IAAI,OAAO,KAAK,MAAM,GAAG;AACpC,iBAAK,IAAI;AACT,mBAAO,OAAO,KAAK,EAAE,IAAI,OAAO,KAAK,EAAE;AACvC,mBAAO,OAAO,KAAK,EAAE,IAAI,OAAO,KAAK,EAAE;AACvC,iBAAK,EAAE,IAAI,KAAK,CAAC,IAAI;AACrB,iBAAK,EAAE,IAAI,KAAK,CAAC,IAAI;AACrB,iBAAK,CAAC,KAAK;AACX,iBAAK,CAAC,KAAK;AAAA,UACZ;AAAA,QACD;AACA,eAAO;AACP;AAAA,MACD;AAEA,UAAI,SAAS;AACb,UAAI,YAAU,IAAI,aAAa,CAAC;AAShC,aAAO;AACP,aAAO,CAAC;AACR,WAAK,IAAI,GAAG,KAAK,GAAG,KAAK;AACxB,eAAO,KAAK,CAAC;AACb,eAAO,KAAK,CAAC;AACb,YAAI,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO;AACvD,oBAAU,IAAI,CAAC,IAAI;AAAA;AAEnB,oBAAU,IAAI,CAAC,IAAI,KAAK,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,MACzD;AACA,aAAO;AAAA,IACR;AAEA,WAAO,UAAU;AACjB,WAAO,EAAC,WAAU,YAAW,YAAW,MAAK;AAAA,EAC9C;AAEA,CAAC;",
  "names": ["bufferSize"]
}
