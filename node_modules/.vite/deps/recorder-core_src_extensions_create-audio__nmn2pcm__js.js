// E:/fuchuang/learn/demo1/node_modules/recorder-core/src/extensions/create-audio.nmn2pcm.js
(function(factory) {
  var browser = typeof window == "object" && !!window.document;
  var win = browser ? window : Object;
  var rec = win.Recorder, ni = rec.i18n;
  factory(rec, ni, ni.$T, browser);
})(function(Recorder, i18n, $T, isBrowser) {
  "use strict";
  var NMN2PCM = function(set) {
    var texts = set.texts || [];
    if (typeof texts == "string")
      texts = [texts];
    var setSR = set.sampleRate, sampleRate = setSR;
    if (!sampleRate || sampleRate < 1)
      sampleRate = 48e3;
    var meterDur = set.meterDuration || 600;
    var timbre = set.timbre || 2;
    if (timbre < 1)
      timbre = 1;
    var volume = set.volume;
    if (volume == null)
      volume = 0.3;
    volume = Math.max(0, volume);
    volume = Math.min(1, volume);
    var waveType = set.waveType || "";
    if (",sine,square,sawtooth,triangle,".indexOf("," + waveType + ",") == -1)
      waveType = "";
    waveType = waveType || "sine";
    var muteDur = set.muteDuration;
    if (muteDur == null || muteDur < 0) {
      muteDur = meterDur / 4;
      if (muteDur > 50)
        muteDur = 50;
    }
    var mute0 = new Int16Array(sampleRate * muteDur / 1e3);
    var beginDur = set.beginDuration;
    if (beginDur == null || beginDur < 0)
      beginDur = 200;
    var beginMute = new Int16Array(sampleRate * beginDur / 1e3);
    var endDur = set.endDuration;
    if (endDur == null || endDur < 0)
      endDur = 200;
    var endMute = new Int16Array(sampleRate * endDur / 1e3);
    var s = function(s2) {
      return 440 / Math.pow(2, s2 / 12);
    };
    var Freqs = [s(9), s(7), s(5), s(4), s(2), s(0), s(-2)];
    var FreqMP = {};
    for (var i = 1; i <= 7; i++) {
      var v = Freqs[i - 1];
      FreqMP[i + "..."] = v / 8;
      FreqMP[i + ".."] = v / 4;
      FreqMP[i + "."] = v / 2;
      FreqMP[i] = v;
      FreqMP[i + "'"] = v * 2;
      FreqMP[i + "''"] = v * 4;
      FreqMP[i + "'''"] = v * 8;
    }
    var tracks = [], freqMax = 0, freqMin = 9e4;
    for (var iT = 0; setSR != -1 && iT < texts.length; iT++) {
      var meters = texts[iT].split(/[\s\|]+/);
      var buffers = [], size = 0, wType = waveType, wTimbre = timbre, wVol = volume;
      for (var i0 = 0; i0 < meters.length; i0++) {
        var txt0 = meters[i0];
        if (!txt0)
          continue;
        var v0 = txt0.charCodeAt(0);
        if (v0 < 48 || v0 > 55) {
          var m = /^(\w)(?:\((.+)\)|\[(.+)\])*$/.exec(txt0) || [], mT = m[1];
          var m = /\((.+)\)/.exec(txt0) || [], mTb = m[1];
          var m = /\[(.+)\]/.exec(txt0) || [], mVol = m[1];
          if (mT == "R") {
            wType = waveType;
            wTimbre = timbre;
            wVol = volume;
          } else if (mT == "S")
            wType = "sine";
          else if (mT == "Q")
            wType = "square";
          else if (mT == "A")
            wType = "sawtooth";
          else if (mT == "T")
            wType = "triangle";
          else
            mT = "";
          if (!mT || mTb && !+mTb || mVol && !+mVol)
            throw new Error("Invalid: " + txt0);
          if (mTb)
            wTimbre = +mTb;
          if (mVol)
            wVol = volume * mVol;
          continue;
        }
        var ys = txt0.split(",");
        var durTotal = meterDur;
        var bTotal = 0, hasG = 0, hasX = 0;
        for (var i2 = 0; i2 < ys.length; i2++) {
          var vs = ys[i2].split("");
          var o = { y: vs[0], b: 1, t: wType, tb: wTimbre, vol: wVol };
          ys[i2] = o;
          for (var i3 = 1; i3 < vs.length; i3++) {
            var v = vs[i3];
            if (v == "'")
              o.y += "'";
            else if (v == ".")
              o.y += ".";
            else if (v == "-") {
              o.b += 1;
              durTotal += meterDur;
            } else if (v == "_") {
              o.b /= 2;
              hasG = 1;
            } else if (v == "*" && !hasX) {
              o.b += 0.5;
              hasX = 0.5;
              if (vs[i3 + 1] == "*") {
                o.b -= 0.25;
                hasX = 0.25;
                i3++;
              }
            } else
              throw new Error($T("3RBa::符号[{1}]无效：{2}", 0, v, txt0));
          }
          bTotal += o.b;
        }
        if (bTotal % 1 > 0) {
          if (hasG) {
            durTotal *= bTotal / Math.ceil(bTotal);
          } else if (hasX) {
            durTotal += meterDur * hasX;
          }
        }
        durTotal -= ys.length * muteDur;
        for (var i2 = 0; i2 < ys.length; i2++) {
          var o = ys[i2], wType = o.t, wTimbre = o.tb, wVol = o.vol, freq = FreqMP[o.y] || 0;
          if (!freq && o.y != "0")
            throw new Error($T("U212::音符[{1}]无效：{2}", 0, o.y, txt0));
          freq = freq * wTimbre;
          var dur = durTotal * o.b / bTotal;
          var pcm = new Int16Array(Math.round(dur / 1e3 * sampleRate));
          if (freq) {
            freqMax = Math.max(freqMax, freq);
            freqMin = Math.min(freqMin, freq);
            if (wType == "sine") {
              var V = 2 * Math.PI * freq / sampleRate;
              for (var i = 0; i < pcm.length; i++) {
                var v = wVol * Math.sin(V * i);
                pcm[i] = Math.max(-1, Math.min(1, v)) * 32767;
              }
            } else if (wType == "square") {
              var V = sampleRate / freq;
              for (var i = 0; i < pcm.length; i++) {
                var v = wVol * (i % V < V / 2 ? 1 : -1);
                pcm[i] = Math.max(-1, Math.min(1, v)) * 32767;
              }
            } else if (wType == "sawtooth") {
              var V = sampleRate / freq;
              for (var i = 0; i < pcm.length; i++) {
                var v = wVol * (-1 + 2 * (i % V) / V);
                pcm[i] = Math.max(-1, Math.min(1, v)) * 32767;
              }
            } else if (wType == "triangle") {
              var V = sampleRate / freq;
              for (var i = 0; i < pcm.length; i++) {
                var Vi = (i + V / 4) % V;
                var v = wVol * (Vi < V / 2 ? -1 + 4 * Vi / V : 3 - 4 * Vi / V);
                pcm[i] = Math.max(-1, Math.min(1, v)) * 32767;
              }
            }
            var pcmDur4 = ~~(pcm.length / sampleRate * 1e3 / 4) || 1;
            FadeInOut(pcm, sampleRate, Math.min(pcmDur4, 10));
          }
          var mute = mute0;
          if (!buffers.length)
            mute = beginMute;
          buffers.push(mute);
          size += mute.length;
          buffers.push(pcm);
          size += pcm.length;
        }
      }
      if (size > 0) {
        buffers.push(endMute);
        size += endMute.length;
        tracks.push({ buffers, size });
      }
    }
    tracks.sort(function(a, b) {
      return b.size - a.size;
    });
    var pcm = new Int16Array(tracks[0] && tracks[0].size || 0);
    for (var iT = 0; iT < tracks.length; iT++) {
      var o = tracks[iT], buffers = o.buffers, size = o.size;
      if (iT == 0) {
        for (var i = 0, offset = 0; i < buffers.length; i++) {
          var buf = buffers[i];
          pcm.set(buf, offset);
          offset += buf.length;
        }
      } else {
        var diffMs = (pcm.length - size) / sampleRate * 1e3;
        if (diffMs > 10) {
          throw new Error($T("7qAD::多个音时必须对齐，相差{1}ms", 0, diffMs));
        }
        ;
        for (var i = 0, offset = 0; i < buffers.length; i++) {
          var buf = buffers[i];
          for (var j = 0; j < buf.length; j++) {
            var data_mix, data1 = pcm[offset], data2 = buf[j];
            if (data1 < 0 && data2 < 0) {
              data_mix = data1 + data2 - data1 * data2 / -32767;
            } else {
              data_mix = data1 + data2 - data1 * data2 / 32767;
            }
            ;
            pcm[offset++] = data_mix;
          }
        }
      }
    }
    var dur = Math.round(pcm.length / sampleRate * 1e3);
    var Warns = [], minSR = ~~(freqMax * 2);
    if (freqMax && sampleRate < minSR) {
      var msg = "sampleRate[" + sampleRate + "] should be greater than " + minSR;
      Warns.push(msg);
      Recorder.CLog("NMN2PCM: " + msg, 3);
    }
    return { pcm, duration: dur, warns: Warns, set: {
      texts,
      sampleRate,
      timbre,
      meterDuration: meterDur,
      muteDuration: muteDur,
      beginDuration: beginDur,
      endDuration: endDur,
      volume,
      waveType
    } };
  };
  var FadeInOut = NMN2PCM.FadeInOut = function(arr, sampleRate, dur) {
    var sd = sampleRate / 1e3 * (dur || 1);
    for (var i = 0; i < sd; i++) {
      arr[i] *= i / sd;
    }
    for (var l = arr.length, i = ~~(l - sd); i < l; i++) {
      arr[i] *= (l - i) / sd;
    }
  };
  NMN2PCM.GetExamples = function() {
    return {
      DFH: {
        //前3句，https://www.hnchemeng.com/liux/201807/68393.html
        name: "东方红",
        get: function(sampleRate) {
          return NMN2PCM({
            //https://www.bilibili.com/video/BV1VW4y1v7nY?p=2
            sampleRate,
            meterDuration: 1e3,
            timbre: 3,
            texts: "5 5,6|2-|1 1,6.|2-|5 5|6,1' 6,5|1 1,6.|2-"
          });
        }
      },
      HappyBirthday: {
        //4句，https://www.zaoxu.com/jjsh/bkdq/310228.html
        name: $T("QGsW::祝你生日快乐"),
        get: function(sampleRate) {
          return NMN2PCM({
            sampleRate,
            meterDuration: 450,
            timbre: 4,
            waveType: "triangle",
            volume: 0.15,
            texts: "5.,5. 6. 5.|1 7.-|5.,5. 6. 5.|2 1-|5.,5. 5 3|1 7. 6.|4*,4_ 3 1|2 1-"
          });
        }
      },
      LHC: {
        //节选一段，https://www.qinyipu.com/jianpu/jianpudaquan/41703.html
        name: "兰花草（洒水版）",
        get: function(sampleRate) {
          return NMN2PCM({
            sampleRate,
            meterDuration: 650,
            timbre: 4,
            texts: "6.,3 3,3|3* 2_|1*,2_ 1,7.|6.-|6,6 6,6|6* 5_|3_,5_,5 5,4|3-|3,3_,6_ 6,5|3* 2_|1*,2_ 1,7.|6. 3.|3.,1 1,7.|6.* 2__,3__|2*,1_ 7._,7._,5.|6.-"
          });
        }
      },
      ForElise: {
        //节选一段，https://www.qinyipu.com/jianpu/chunyinle/3023.html
        name: $T("emJR::致爱丽丝"),
        get: function(sampleRate) {
          return NMN2PCM({
            sampleRate,
            meterDuration: 550,
            muteDuration: 20,
            timbre: 6,
            texts: "3',2'|3',2' 3',7 2',1'|6 0,1 3,6|7 0,3 5,7|1' 0 3',2'|3',2' 3',7 2',1'|6 0,1 3,6|7 0,3 1',7|6 0,7 1',2'|3' 0,5 4',3'|2' 0,4 3',2'|1' 0,3 2',1'|7"
          });
        }
      },
      Canon_Right: {
        //节选一段，https://www.cangqiang.com.cn/d/32153.html
        name: $T("GsYy::卡农-右手简谱"),
        get: function(sampleRate) {
          return NMN2PCM({
            sampleRate,
            meterDuration: 700,
            texts: "1',7 1',3 5 6,7|1' 3' 5',3' 5',6'|4',3' 2',4' 3',2' 1',7|      7 1',2'|5',3'_,4'_ 5',3'_,4'_ 5',5,6,7 1',2',3',4'|3',1'_,2'_ 3',3_,4_ 5,6,5,4 5,1',7,1'|6,1'_,7_ 6,5_,4_ 5,4,3,4 5,6,7,1'|6,1'_,7_ 1',7_,6_ 7,6,7,1' 2'_,1'_,7|1'-"
          });
        }
      },
      Canon: {
        //开头一段，https://www.kanpula.com/jianpu/21316.html
        name: $T("bSFZ::卡农"),
        get: function(sampleRate) {
          var txt1 = "", txt2 = "", txt3 = "", txt4 = "";
          txt1 += "3'---|2'---|1'---|7---|";
          txt2 += "1'---|7---|6---|5---|";
          txt3 += "5---|5---|3---|3---|";
          txt4 += "R[0.3] 1. 5. 1 3|5.. 2. 5. 7.|6.. 3. 6. 1|3.. 7.. 3. 5.|";
          txt1 += "6---|5---|6---|7---|";
          txt2 += "4---|3---|4---|5---|";
          txt3 += "1---|1---|1---|2---|";
          txt4 += "4.. 1. 4. 6.|1. 5. 1 3|4.. 1. 4. 6.|5.. 2. 5. 7.|";
          txt1 += "3'---|2'---|1'---|7---|";
          txt2 += "1'---|7---|6---|5---|";
          txt3 += "5---|5---|3---|3-- 5'|";
          txt4 += "1. 5. 1 3|5.. 2. 5. 7.|6.. 3. 6. 1|3.. 7.. 3. 5.|";
          txt1 += "4' 3' 2' 4'|3' 2' 1' 5|6- 6 1'|7 1' 2'-|";
          txt2 += "4.. 1. 4. 6.|1. 5. 1 3|4.. 1. 4. 6.|5.. 2. 5. 7.|";
          txt3 += "0---|0---|0---|0---|";
          txt4 += "0---|0---|0---|0---|";
          txt1 += "3',5 1'_ 5' 5_ 3'|3' 4' 3' 2'|1',3 6_ 3' 3_ 1'|1' 2' 1' 7|";
          txt2 += "1. 5. 1 3|5.. 2. 5. 7.|6.. 3. 6. 1|3.. 7.. 3. 5.|";
          txt3 += "0---|0---|0---|0---|";
          txt4 += "0---|0---|0---|0---|";
          txt1 += "6,1 4_ 1' 1_ 6|5,1 3_ 1' 1_ 5|6,1 4_ 1' 1_ 6|7 7 1' 2'|";
          txt2 += "4.. 1. 4. 6.|1. 5. 1 3|4.. 1. 4. 6.|5..,5. 5..,5. 6..,6. 6..,6.|";
          txt3 += "0---|0---|0---|0---|";
          txt4 += "0---|0---|0---|0---|";
          return NMN2PCM({
            sampleRate,
            meterDuration: 500,
            texts: [txt1, txt2, txt3, txt4]
          });
        }
      }
    };
  };
  Recorder.NMN2PCM = NMN2PCM;
});
//# sourceMappingURL=recorder-core_src_extensions_create-audio__nmn2pcm__js.js.map
