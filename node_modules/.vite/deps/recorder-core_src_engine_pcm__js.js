// E:/fuchuang/learn/demo1/node_modules/recorder-core/src/engine/pcm.js
(function(factory) {
  var browser = typeof window == "object" && !!window.document;
  var win = browser ? window : Object;
  var rec = win.Recorder, ni = rec.i18n;
  factory(rec, ni, ni.$T, browser);
})(function(Recorder, i18n, $T, isBrowser) {
  "use strict";
  Recorder.prototype.enc_pcm = {
    stable: true,
    fast: true,
    getTestMsg: function() {
      return $T("fWsN::pcm为未封装的原始音频数据，pcm音频文件无法直接播放，可用Recorder.pcm2wav()转码成wav播放；支持位数8位、16位（填在比特率里面），采样率取值无限制");
    }
  };
  var NormalizeSet = function(set) {
    var bS = set.bitRate, b = bS == 8 ? 8 : 16;
    if (bS != b)
      Recorder.CLog($T("uMUJ::PCM Info: 不支持{1}位，已更新成{2}位", 0, bS, b), 3);
    set.bitRate = b;
  };
  Recorder.prototype.pcm = function(res, True, False) {
    var set = this.set;
    NormalizeSet(set);
    var bytes = PcmEncode(res, set.bitRate);
    True(bytes.buffer, "audio/pcm");
  };
  var PcmEncode = function(pcm, bitRate) {
    if (bitRate == 8) {
      var size = pcm.length;
      var bytes = new Uint8Array(size);
      for (var i = 0; i < size; i++) {
        var val = (pcm[i] >> 8) + 128;
        bytes[i] = val;
      }
      ;
    } else {
      pcm = new Int16Array(pcm);
      var bytes = new Uint8Array(pcm.buffer);
    }
    ;
    return bytes;
  };
  Recorder.pcm2wav = function(data, True, False) {
    if (!data.blob) {
      data = { blob: data };
    }
    ;
    var blob = data.blob;
    var sampleRate = data.sampleRate || 16e3, bitRate = data.bitRate || 16;
    if (!data.sampleRate || !data.bitRate) {
      Recorder.CLog($T("KmRz::pcm2wav必须提供sampleRate和bitRate"), 3);
    }
    ;
    if (!Recorder.prototype.wav) {
      False($T.G("NeedImport-2", ["pcm2wav", "src/engine/wav.js"]));
      return;
    }
    ;
    var loadOk = function(arrB, dArrB) {
      var pcm;
      if (bitRate == 8) {
        var u8arr = new Uint8Array(arrB);
        pcm = new Int16Array(u8arr.length);
        for (var j = 0; j < u8arr.length; j++) {
          pcm[j] = u8arr[j] - 128 << 8;
        }
        ;
      } else {
        pcm = new Int16Array(arrB);
      }
      ;
      var rec = Recorder({
        type: "wav",
        sampleRate,
        bitRate
      });
      if (dArrB)
        rec.dataType = "arraybuffer";
      rec.mock(pcm, sampleRate).stop(function(wavBlob, duration, mime) {
        True(wavBlob, duration, mime);
      }, False);
    };
    if (blob instanceof ArrayBuffer) {
      loadOk(blob, 1);
    } else {
      var reader = new FileReader();
      reader.onloadend = function() {
        loadOk(reader.result);
      };
      reader.readAsArrayBuffer(blob);
    }
    ;
  };
  Recorder.prototype.pcm_envCheck = function(envInfo, set) {
    return "";
  };
  Recorder.prototype.pcm_start = function(set) {
    NormalizeSet(set);
    return { set, memory: new Uint8Array(5e5), mOffset: 0 };
  };
  var addBytes = function(cur, buf) {
    var bufLen = buf.length;
    if (cur.mOffset + bufLen > cur.memory.length) {
      var tmp = new Uint8Array(cur.memory.length + Math.max(5e5, bufLen));
      tmp.set(cur.memory.subarray(0, cur.mOffset));
      cur.memory = tmp;
    }
    cur.memory.set(buf, cur.mOffset);
    cur.mOffset += bufLen;
  };
  Recorder.prototype.pcm_stop = function(startCtx) {
    if (startCtx && startCtx.memory) {
      startCtx.memory = null;
    }
  };
  Recorder.prototype.pcm_encode = function(startCtx, pcm) {
    if (startCtx && startCtx.memory) {
      var set = startCtx.set;
      var bytes = PcmEncode(pcm, set.bitRate);
      if (set.takeoffEncodeChunk) {
        set.takeoffEncodeChunk(bytes);
      } else {
        addBytes(startCtx, bytes);
      }
      ;
    }
    ;
  };
  Recorder.prototype.pcm_complete = function(startCtx, True, False, autoStop) {
    if (startCtx && startCtx.memory) {
      if (autoStop) {
        this.pcm_stop(startCtx);
      }
      ;
      var buffer = startCtx.memory.buffer.slice(0, startCtx.mOffset);
      True(buffer, "audio/pcm");
    } else {
      False($T("sDkA::pcm编码器未start"));
    }
    ;
  };
});
//# sourceMappingURL=recorder-core_src_engine_pcm__js.js.map
