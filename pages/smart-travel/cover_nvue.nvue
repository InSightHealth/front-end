<template>
	<view class="pengke-camera" :style="{ width: windowWidth, height: windowHeight }">
		<live-pusher
			id="livePusher"
			ref="livePusher"
			class="livePusher"
			mode="FHD"
			beauty="0"
			whiteness="0"
			:aspect="aspect"
			min-bitrate="1000"
			audio-quality="16KHz"
			device-position="back"
			:auto-focus="true"
			:muted="true"
			:enable-camera="true"
			:enable-mic="false"
			:zoom="false"
			@statechange="statechange"
			:style="{ width: windowWidth, height: windowHeight }"
		></live-pusher>
		
		<view class="chat" :style="{ width: windowWidth, height: windowHeight }">
			<cover-view class="coverchat" :style="{ width: windowWidth, height: windowHeight }">
				<scroll-view  :style="{height: `${windowHeight * 0.8}px`}"
				id="scrollview"
				scroll-y="true" 
				:scroll-top="scrollTop"
				class="scroll-view"
				enable-flex="true"
				>
					<!-- {{randstr}}<br>{{randstr}}<br>{{randstr}}<br>{{randstr}}<br> -->
					<cover-chat :msgList="msglist" ></cover-chat>
				</scroll-view>
				
				<cover-view class="mic-container" :style="{height: `${windowHeight * 0.2}px`}">
					<micphone 
						ref="micphone" 
						@touchstart="startMic" 
						@touchend="stopMic"
						:style="{ transform: `scale(${micScale})` }"
						></micphone> 
				</cover-view>
			</cover-view>
		</view>
	</view>
</template>

<script>
let _this = null;
const recorderManager = uni.getRecorderManager();
const innerAudioContext = uni.createInnerAudioContext();

export default {
	data() {
		return {
			poenCarmeInterval:null,
			aspect: '2:3', 
			windowWidth: '', 
			windowHeight: '', 
			camerastate: false, 
			livePusher: null, 
			snapshotsrc: null, 
			msglist: [
				{
					botContent: "hello，请问我有什么可以帮助你的吗？",
					recordId: 0,
					titleId: 0,
					userContent: "",
					userId: 0
				},
			],
			randstr: 'ksdafhaslihflksahfklksdafhaslihflksahfklksdafhaslihflksahfklksdafhaslihflksahfkl',
			micScale: 1,
			backUrl: '',
			baseUrl: '', 
			token: '',
		};
	},
	onLoad(e) {
		_this = this;
		this.token = getApp().getToken();
		this.backUrl = getApp().globalData.backUrl;
		this.baseUrl = getApp().globalData.baseUrl;
		this.initCamera();
	},
	onUnload(){
		uni.offKeyboardHeightChange()
	},
	onReady() {
		this.livePusher = uni.createLivePusherContext('livePusher', this);
		this.startPreview(); 
		this.poenCarme();
	},
	methods: {
		
		poenCarme(){
			//#ifdef APP-PLUS
			if (plus.os.name == 'Android') {
				this.poenCarmeInterval = setInterval(function() {
					if (!_this.camerastate) _this.startPreview();
				}, 2500);
			}
			//#endif
		},
		
		initCamera() {
			uni.getSystemInfo({
				success: function(res) {
					_this.windowWidth = res.windowWidth;
					_this.windowHeight = res.windowHeight;
					let zcs = _this.aliquot(_this.windowWidth,_this.windowHeight);
					_this.aspect = (_this.windowWidth/zcs)+':'+(_this.windowHeight/zcs);
				}
			});
		},
		
		aliquot(x, y) {
			if (x % y == 0) return y;
			return this.aliquot(y, x % y);
		},

		startPreview() {
			this.livePusher.startPreview({
				success: a => {
					console.log(a)
				}
			});
		},
		
		stopPreview() {
			this.livePusher.stopPreview({
				success: a => {
					_this.camerastate = false;
				}
			});
		},
		
		statechange(e) {
			
			if (e.detail.code == 1007) {
				_this.camerastate = true;
			} else if (e.detail.code == -1301) {
				_this.camerastate = false;
			}
		},
		
		back() {
			uni.navigateBack();
		},
		
		snapshot() {
			uni.vibrateShort({
			    success: function () {
			        console.log('success');
			    }
			});
			
			this.livePusher.snapshot({
				success: e => {
					_this.snapshotsrc = e.message.tempImagePath;
					this.snapshotsrc = e.message.tempImagePath;
				}
			});
		},
		
		setImage() {
			let pages = getCurrentPages();
			let prevPage = pages[pages.length - 2];
			prevPage.$vm.setImage({ path: _this.snapshotsrc});
		},
		
		startMic() {
			console.log('开始录音');
			recorderManager.start();
			this.micScale = 1.3;
		},
		
		stopMic() {
			console.log('录音结束');
			const url = this.baseUrl + "/speechtotext";
			recorderManager.stop();
			this.micScale = 1;
			console.log('')
			recorderManager.onStop(function (res) {
				uni.uploadFile({
					url: url
					,name: "mp3"
					,filePath: res.tempFilePath
					,formData: { }
					,success: (res) => { 
						console.log("上传成功："+JSON.stringify(res));
						const response = JSON.parse(res.data);
						if (res.statusCode == 200) {
							_this.msglist.push({
								botContent: "",
								recordId: 0,
								titleId: 0,
								userContent: response.text,
								userId: 0
							});
							
							_this.msglist.push({
								botContent: "发送中...",
								recordId: 0,
								titleId: 0,
								userContent: "",
								userId: 0
							});
							
							_this.handleRecord(response.text);
						}
					}
					,fail: (err)=>{ console.error("上传录音失败："+err.errMsg); }
				});
			});
		},
		
		handleRecord(text) {
			this.livePusher.snapshot({
				success: e => {
					_this.snapshotsrc = e.message.tempImagePath;
					console.log("_this.snapshotsrc = " + _this.snapshotsrc);
					uni.uploadFile({
						url: this.backUrl + '/storage/api/v1/uploadImg/move',
						filePath: _this.snapshotsrc,
						name: 'multipartFile',
						formData: { },
						header: {
							'token': this.token
						},
						success: (uploadFileRes) => {
							console.log(uploadFileRes.data);
							const response = JSON.parse(uploadFileRes.data);
							if (response.code == 200) {
								console.log(response.data);
								_this.sendChat(text, response.data.image)
							}
						}, fail: (err) => {
							console.log(err.errMsg);
						}
					})
				}
			});
		},
		
		sendChat(text, imgUrl) {
			console.log('text = ' + text + '   imgUrl = ' + imgUrl);
			uni.request({
				url: this.baseUrl + '/chatbot',
				method: 'POST',
				data: {
					'prompt': text,
					'image': imgUrl,
				},
				success: (res) => {
					console.log(res);
					_this.msglist.pop();
					
					try {
						const response = res.data;
						_this.msglist.push({
							botContent: response.response,
							recordId: 0,
							titleId: 0,
							userContent: "",
							userId: 0
						});
						const encoded = encodeURI(response.response);
						console.log(encoded);
						innerAudioContext.src = `https://tts.baidu.com/text2audio.mp3?lan=ZH&cuid=baike&spd=5&ctp=1&amp&pdt=301&tex=` + encoded;
						innerAudioContext.play();
					} catch(e) {
						_this.msglist.push({
							botContent: "发送失败",
							recordId: 0,
							titleId: 0,
							userContent: "",
							userId: 0
						});
						const encoded = encodeURI("发送失败");
						console.log(encoded);
						innerAudioContext.src = `https://tts.baidu.com/text2audio.mp3?lan=ZH&cuid=baike&spd=5&ctp=1&amp&pdt=301&tex=` + encoded;
						innerAudioContext.play();
					}
				},
				fail: (err) => {
					console.log(err);
					_this.msglist.pop();
					_this.msglist.push({
						botContent: "发送失败",
						recordId: 0,
						titleId: 0,
						userContent: "",
						userId: 0
					});
					const encoded = encodeURI("发送失败");
					console.log(encoded);
					innerAudioContext.src = `https://tts.baidu.com/text2audio.mp3?lan=ZH&cuid=baike&spd=5&ctp=1&amp&pdt=301&tex=` + encoded;
					innerAudioContext.play();
				}
			});
		}
	}
};
</script>

<style lang="scss" scoped>

$chatContentbgc: #C2DCFF;

view {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

.pengke-camera {
	justify-content: center;
	align-items: center;
	.chat {
		position: absolute;
		left: 0;
		bottom: 0;
		z-index: 98;
		align-items: center;
		justify-content: center;
		.coverchat{
			z-index: 99;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: space-between;
			.scroll-view {
				height: 100%;
				width: 750rpx;
			}
			
			.mic-container {
				overflow: visible;
				height: 200rpx;
				width: 200rpx;
				display: flex;
				align-items: center;
				justify-content: center;
			}
		}
	}
}
</style>